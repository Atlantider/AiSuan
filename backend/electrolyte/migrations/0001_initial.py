# Generated by Django 5.1.7 on 2025-03-17 15:10

import django.db.models.deletion
import electrolyte.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Salt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='盐名称')),
                ('cation', models.CharField(max_length=100, verbose_name='阳离子')),
                ('anion', models.CharField(max_length=100, verbose_name='阴离子')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '盐',
                'verbose_name_plural': '盐',
            },
        ),
        migrations.CreateModel(
            name='Solvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='溶剂名称')),
                ('smile', models.CharField(max_length=255, verbose_name='SMILE表示法')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '溶剂',
                'verbose_name_plural': '溶剂',
            },
        ),
        migrations.CreateModel(
            name='Calculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='计算名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述')),
                ('status', models.CharField(choices=[('pending', '待处理'), ('running', '运行中'), ('completed', '已完成'), ('failed', '失败')], default='pending', max_length=20, verbose_name='状态')),
                ('task_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Celery任务ID')),
                ('input_file', models.FileField(blank=True, null=True, upload_to=electrolyte.models.calculation_file_path, verbose_name='输入文件')),
                ('output_file', models.FileField(blank=True, null=True, upload_to=electrolyte.models.calculation_file_path, verbose_name='输出文件')),
                ('log_file', models.FileField(blank=True, null=True, upload_to=electrolyte.models.calculation_file_path, verbose_name='日志文件')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='错误信息')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='开始时间')),
                ('finished_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calculations', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '计算',
                'verbose_name_plural': '计算',
            },
        ),
        migrations.CreateModel(
            name='CalculationResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ionic_conductivity', models.FloatField(blank=True, null=True, verbose_name='离子电导率(S/m)')),
                ('diffusion_coefficients', models.JSONField(blank=True, null=True, verbose_name='扩散系数')),
                ('radial_distribution', models.JSONField(blank=True, null=True, verbose_name='径向分布函数')),
                ('density', models.FloatField(blank=True, null=True, verbose_name='密度(g/cm³)')),
                ('viscosity', models.FloatField(blank=True, null=True, verbose_name='黏度(cP)')),
                ('additional_results', models.JSONField(blank=True, null=True, verbose_name='额外结果')),
                ('calculation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='electrolyte.calculation', verbose_name='计算')),
            ],
            options={
                'verbose_name': '计算结果',
                'verbose_name_plural': '计算结果',
            },
        ),
        migrations.CreateModel(
            name='ElectrolyteFormulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='配方名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formulations', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '电解质配方',
                'verbose_name_plural': '电解质配方',
            },
        ),
        migrations.AddField(
            model_name='calculation',
            name='formulation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calculations', to='electrolyte.electrolyteformulation', verbose_name='配方'),
        ),
        migrations.CreateModel(
            name='SimulationParameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField(verbose_name='温度(K)')),
                ('pressure', models.FloatField(default=1.0, verbose_name='压力(atm)')),
                ('time_step', models.FloatField(default=1.0, verbose_name='时间步长(fs)')),
                ('equilibration_steps', models.IntegerField(default=10000, verbose_name='平衡步数')),
                ('production_steps', models.IntegerField(default=50000, verbose_name='生产步数')),
                ('cutoff', models.FloatField(default=12.0, verbose_name='截断距离(Å)')),
                ('additional_params', models.JSONField(blank=True, null=True, verbose_name='额外参数')),
                ('formulation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='electrolyte.electrolyteformulation', verbose_name='配方')),
            ],
            options={
                'verbose_name': '模拟参数',
                'verbose_name_plural': '模拟参数',
            },
        ),
        migrations.CreateModel(
            name='FormulationComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component_type', models.CharField(choices=[('salt', '盐'), ('solvent', '溶剂')], max_length=10, verbose_name='组件类型')),
                ('concentration', models.FloatField(verbose_name='浓度/比例')),
                ('formulation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='electrolyte.electrolyteformulation', verbose_name='配方')),
                ('salt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='electrolyte.salt', verbose_name='盐')),
                ('solvent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='electrolyte.solvent', verbose_name='溶剂')),
            ],
            options={
                'verbose_name': '配方组件',
                'verbose_name_plural': '配方组件',
            },
        ),
    ]
